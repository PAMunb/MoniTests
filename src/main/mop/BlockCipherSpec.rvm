package mop;

import java.security.Key;
import javax.crypto.Cipher;
import br.unb.cic.mop.jca.eh.*;
import static br.unb.cic.mop.jca.util.CipherTransformationUtil.*;
import br.unb.cic.mop.jca.util.ExecutionContext;
BlockCipherSpec() {
	event g1(String transformation){
		if ( ! (isValid(transformation)) ) {
			return false;
		}
		{
		}
	}
	event invalidGetInstance(String transformation){
		if ( ! (!isValid(transformation)) ) {
			return false;
		}
		{
			ErrorCollector.instance().addError(new ErrorDescription(ErrorType.UnsafeAlgorithm, "" + __LOC, "expecting one of {AES/CBC/PKCS5Padding, AES/PCBC/ISO10126Padding, ...} but found " + transformation + "."));
		}
	}
	event i3(int mode, java.security.Key key){
		if ( ! (ExecutionContext.instance().validate(ExecutionContext.Property.GENERATED_KEY, key)) ) {
			return false;
		}
		{
		}
	}
	event u1(byte[] plainText){
	}
	event f1(){
	}
	ere:  g1 i3 u1 f1

	@fail
	{
		ErrorCollector.instance().addError(new ErrorDescription(ErrorType.InvalidSequenceOfMethodCalls, "" + __LOC));
		__RESET;
	}
}

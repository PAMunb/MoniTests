package mop;

import javax.crypto.CipherOutputStream;
import java.io.OutputStream;
import javax.crypto.Cipher;

import br.unb.cic.mop.eh.*;
import br.unb.cic.mop.ExecutionContext;

CipherOutputStreamSpec() {
    event c1 after() : call(public CipherOutputStream.new(OutputStream, Cipher)) {
        System.out.println("c1 was called");
    }

    event w1 after() : call(public void CipherOutputStream.write(int)) || call(public void CipherOutputStream.write(byte[])) {
        System.out.println("w1 was called");
    }

    event w2 after(byte[] b, int off, int len) :
     call(public void CipherOutputStream.write(byte[], int, int)) && args(b, off, len) {
        System.out.println("w2 was called");
    }

    event fl after() : call(public void CipherOutputStream.flush()) {
        System.out.println("fl was called");
    }

    event cl after(): call(public void CipherOutputStream.close()) {
        System.out.println("cl was called");
    }

    ere : c1 (w1 | w2 | fl)+ cl

    @fail {
       System.out.println("InvalidSequenceOfMethodCalls");
       ErrorCollector.instance().addError(new ErrorDescription(ErrorType.InvalidSequenceOfMethodCalls, "CipherOutputStreamSpec", "" + __LOC));
       __RESET;
    }
}
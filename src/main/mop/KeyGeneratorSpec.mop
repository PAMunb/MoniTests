package mop;

import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import java.security.SecureRandom;
import java.security.spec.AlgorithmParameterSpec;

import br.unb.cic.mop.eh.*;
import br.unb.cic.mop.ExecutionContext;

/**
 * KeyGeneratorSpec
 *
 * A JavaMOP specification of the correct usage of the
 * javax.crypto.KeyGenerator class.
 *
 * https://github.com/CROSSINGTUD/Crypto-API-Rules/blob/master/JavaCryptographicArchitecture/src/KeyGenerator.crysl
 */
KeyGeneratorSpec(KeyGenerator k) {

    List<String> algorithms = Arrays.asList("AES", "HmacSHA256", "HmacSHA384", "HmacSHA512");

    KeyGenerator keyGenerator = null;

    Key generatedKey;

    event g1 after(String alg) returning(KeyGenerator k):
      call(public static KeyGenerator KeyGenerator.getInstance(String))
      && args(alg)
      && condition(algorithms.contains(alg)) {
        keyGenerator = k;
    }

    event g2 after(String alg) returning(KeyGenerator k):
      call(public static KeyGenerator KeyGenerator.getInstance(String, ..))
      && args(alg, *)
      && condition(algorithms.contains(alg)) {
        keyGenerator = k;
    }

    event g3 after(String alg) returning(KeyGenerator k):
      call(public static KeyGenerator KeyGenerator.getInstance(String))
      && args(alg)
      && condition(!algorithms.contains(alg))  {
        ErrorCollector.instance().addError(new ErrorDescription(ErrorType.UnsafeAlgorithm, "KeyGeneratorSpec", "" + __LOC,
          "one of" + String.join(",", algorithms) + " but found " + alg + "."));
    }

    event init before(KeyGenerator k):
       ( call(public void KeyGenerator.init(int)) ||
         call(public void KeyGenerator.init(int, SecureRandom)) ||
         call(public void KeyGenerator.init(AlgorithmParameterSpec)) ||
         call(public void KeyGenerator.init(AlgorithmParameterSpec, SecureRandom)) ||
         call(public void KeyGenerator.init(SecureRandom))
       ) && target(k) {  }

    event gk1 after(KeyGenerator k) returning(SecretKey key):
      call(public SecretKey KeyGenerator.generateKey())
      && target(k) {
        generatedKey = key;
        ExecutionContext.instance().setProperty(ExecutionContext.Property.GENERATED_KEY, generatedKey);
    }

    ere : (g1 | g2) ((init gk1) | gk1)

    @fail {
        ErrorCollector.instance().addError(new ErrorDescription(ErrorType.InvalidSequenceOfMethodCalls, "KeyGeneratorSpec", "" + __LOC));
        ExecutionContext.instance().unsetObjectAsInAcceptingState(keyGenerator);
        ExecutionContext.instance().remove(ExecutionContext.Property.GENERATED_KEY, generatedKey);

        __RESET;
    }

    @match {
       ExecutionContext.instance().setObjectAsInAcceptingState(keyGenerator);
    }
}
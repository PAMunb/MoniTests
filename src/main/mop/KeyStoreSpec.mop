package mop;

import java.security.KeyStore;
import java.io.InputStream;
import java.security.KeyStore.ProtectionParameter;
import java.security.KeyStore.Entry;
import java.security.Key key;

import br.unb.cic.mop.jca.util.ExecutionContext;

/**
 * KeyStoreSpec
 *
 * A JavaMOP specification of the correct usage of the
 * java.security.KeyStore class.
 *
 * https://github.com/CROSSINGTUD/Crypto-API-Rules/blob/master/JavaCryptographicArchitecture/src/KeyStore.crysl
 */
KeyStoreSpec(KeyStore ks) {

    List<String> types = Arrays.asList("JCEKS", "JKS", "DKS", "PKCS11", "PKCS12");

    KeyStore keyStore = null;

    Key generatedKey = null;

    event g1 after(String ksType) returning(KeyStore k):
      call(public static KeyStore KeyStore.getInstance(String))
      && args(ksType)
      && condition(types.contains(ksType)) {
        keyStore = k;
    }

    event g2 after(String ksType) returning(KeyStore k):
      call(public static KeyStore KeyStore.getInstance(String))
      && args(ksType)
      && condition(!types.contains(ksType))  {
         ErrorCollector.instance().addError(new ErrorDescription(ErrorType.UnsafeAlgorithm, "" + __LOC,
           "one of" + String.join(",", types) + " but found " + ksType + "."));
      }

    event load before(KeyStore k):
      call(public void KeyStore.load(..))
      && target(k) {
        ExecutionContext.instance().setProperty(ExecutionContext.Property.GENERATED_KEY_STORE, keyStore);
    }

    event store before(KeyStore k):
      call(public void KeyStore.store(..))
      && target(k) { }

    event ge1 before(KeyStore k):
      call(public Entry KeyStore.getEntry(String, ProtectionParameter))
      && target(k) { }

    event se1 before(KeyStore k):
      call(public void KeyStore.setEntry(String, Entry, ProtectionParameter))
      && target(k) { }

    event gk1 after(KeyStore k) returning(Key key):
      call(public Key KeyStore.getKey(String, char[]))
      && target(k) {
        generatedKey = key;
        ExecutionContext.instance().setProperty(ExecutionContext.Property.GENERATED_KEY, generatedKey);
    }

    ere : (g1 load (((ge1 gk1) | gk1) | (se1 store))*)+

    @fail {
        ErrorCollector.instance().addError(new ErrorDescription(ErrorType.InvalidSequenceOfMethodCalls, "" + __LOC));
        ExecutionContext.instance().unsetObjectAsInAcceptingState(keyStore);
        ExecutionContext.instance().remove(Property.GENERATED_KEY, generatedKey);
        ExecutionContext.instance().remove(Property.GENERATED_KEY_STORE, keyStore);

        __RESET;
    }

    @match {
       ExecutionContext.instance().setObjectAsInAcceptingState(keyStore);
    }
}
package mop;

import java.security.MessageDigest;
import java.util.List;

import br.unb.cic.mop.eh.*;
import br.unb.cic.mop.ExecutionContext;
import br.unb.cic.mop.ExecutionContext.Property;

// The MessageDigestSpec specifies
// the correct usage of the MessageDigest
// class (from the JCA specification).
MessageDigestSpec(MessageDigest digest) {

    List<String> algorithms = Arrays.asList("SHA-256", "SHA-384", "SHA-512");
    MessageDigest md = null;

	event g1 after(String alg) returning(MessageDigest digest):
	  call(public static MessageDigest MessageDigest.getInstance(String))
	  && args(alg) && condition(algorithms.contains(alg.toUpperCase())) {
	  md = digest;
	}

	event g2 after(String alg) returning(MessageDigest digest):
      call(public static MessageDigest MessageDigest.getInstance(String, ..))
      && args(alg, *) && condition(algorithms.contains(alg.toUpperCase())) {
      md = digest;
    }

	event g3 after(String alg) returning(MessageDigest digest):
	  call(public static MessageDigest MessageDigest.getInstance(String))
    	  && args(alg) && condition(!algorithms.contains(alg.toUpperCase()))
        {
          ErrorCollector.instance().addError(new ErrorDescription(ErrorType.UnsafeAlgorithm, "MessageDigestSpec", "" + __LOC,
             "expecting one of {SHA-256, SHA-384, SHA-512} but found " + alg + "."));
        }

	event update after(MessageDigest digest):
	  call(void MessageDigest.update(..)) &&
	  target(digest) { }

	event reset before(MessageDigest digest):
	  call(void MessageDigest.reset()) &&
	  target(digest) { }

	event d1 after(MessageDigest digest) returning(byte[] out):
	 call(public byte[] MessageDigest.digest()) &&
	 target(digest) {
	    ExecutionContext.instance().setProperty(Property.DIGESTED, out);
	}

	event d2 after(MessageDigest digest) returning(byte[] out):
     call(public byte[] MessageDigest.digest(byte[])) &&
     target(digest) {
    	ExecutionContext.instance().setProperty(Property.DIGESTED, out);
    }

    event d3 after(byte[] out, int offset, int len, MessageDigest digest):
     call(public int MessageDigest.digest(byte[], int, int)) &&
     args(out, offset, len) &&
     target(digest) {
       ExecutionContext.instance().setProperty(Property.DIGESTED, out);
    }

	ere : (g1 | g2) (d2 | (update+ (d1 | d2 | d3)))+

	@fail {
           ErrorCollector.instance().addError(new ErrorDescription(ErrorType.InvalidSequenceOfMethodCalls, "MessageDigestSpec",  "" + __LOC));
           ExecutionContext.instance().unsetObjectAsInAcceptingState(md);
           __RESET;
	}

	@match {
           ExecutionContext.instance().setObjectAsInAcceptingState(md);
	}
}





